/*
 * Places API
 * Places API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.api.places.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mastercard.api.places.model.PlaceFilter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Place Search Request
 */
@ApiModel(description = "Place Search Request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-10T10:46:25.143944500-05:00[America/Chicago]")
public class PlaceSearchRequest {
  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Long distance;

  public static final String SERIALIZED_NAME_PLACE = "place";
  @SerializedName(SERIALIZED_NAME_PLACE)
  private PlaceFilter place;

  public static final String SERIALIZED_NAME_RADIUS_SEARCH = "radiusSearch";
  @SerializedName(SERIALIZED_NAME_RADIUS_SEARCH)
  private Boolean radiusSearch;

  /**
   * Unit of measurement for calculating the radius search. Optional. Measurement of distance unit in miles or kilometers. Value string (m or km
   */
  @JsonAdapter(UnitEnum.Adapter.class)
  public enum UnitEnum {
    MILE("MILE"),
    
    KM("KM");

    private String value;

    UnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitEnum fromValue(String value) {
      for (UnitEnum b : UnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnitEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private UnitEnum unit;


  public PlaceSearchRequest distance(Long distance) {
    
    this.distance = distance;
    return this;
  }

   /**
   * Distance measurement for calculating the radius search. The length of distance from the centroid point. Value integer(&lt;15).
   * @return distance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", value = "Distance measurement for calculating the radius search. The length of distance from the centroid point. Value integer(<15).")

  public Long getDistance() {
    return distance;
  }


  public void setDistance(Long distance) {
    this.distance = distance;
  }


  public PlaceSearchRequest place(PlaceFilter place) {
    
    this.place = place;
    return this;
  }

   /**
   * Get place
   * @return place
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PlaceFilter getPlace() {
    return place;
  }


  public void setPlace(PlaceFilter place) {
    this.place = place;
  }


  public PlaceSearchRequest radiusSearch(Boolean radiusSearch) {
    
    this.radiusSearch = radiusSearch;
    return this;
  }

   /**
   * Switches on the radius search algorithm to be performed with places from a given centroid. Value boolean (true) switches on the radius search algorithm. NOTE - Distance, Latitude and Longitude are REQUIRED for radius search algorithm
   * @return radiusSearch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Switches on the radius search algorithm to be performed with places from a given centroid. Value boolean (true) switches on the radius search algorithm. NOTE - Distance, Latitude and Longitude are REQUIRED for radius search algorithm")

  public Boolean getRadiusSearch() {
    return radiusSearch;
  }


  public void setRadiusSearch(Boolean radiusSearch) {
    this.radiusSearch = radiusSearch;
  }


  public PlaceSearchRequest unit(UnitEnum unit) {
    
    this.unit = unit;
    return this;
  }

   /**
   * Unit of measurement for calculating the radius search. Optional. Measurement of distance unit in miles or kilometers. Value string (m or km
   * @return unit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unit of measurement for calculating the radius search. Optional. Measurement of distance unit in miles or kilometers. Value string (m or km")

  public UnitEnum getUnit() {
    return unit;
  }


  public void setUnit(UnitEnum unit) {
    this.unit = unit;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaceSearchRequest placeSearchRequest = (PlaceSearchRequest) o;
    return Objects.equals(this.distance, placeSearchRequest.distance) &&
        Objects.equals(this.place, placeSearchRequest.place) &&
        Objects.equals(this.radiusSearch, placeSearchRequest.radiusSearch) &&
        Objects.equals(this.unit, placeSearchRequest.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distance, place, radiusSearch, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaceSearchRequest {\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("    radiusSearch: ").append(toIndentedString(radiusSearch)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

