/*
 * Places API
 * Places API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.api.places.client;

import com.mastercard.api.places.ApiCallback;
import com.mastercard.api.places.ApiClient;
import com.mastercard.api.places.ApiException;
import com.mastercard.api.places.ApiResponse;
import com.mastercard.api.places.Configuration;
import com.mastercard.api.places.Pair;
import com.mastercard.api.places.ProgressRequestBody;
import com.mastercard.api.places.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mastercard.api.places.model.ErrorResponse;
import com.mastercard.api.places.model.MerchantIndustryCode;
import com.mastercard.api.places.model.PagedMerchantIndustryCode;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MerchantIndustryCodesApi {
    private ApiClient localVarApiClient;

    public MerchantIndustryCodesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MerchantIndustryCodesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getAllIndustryCodesUsingGET
     * @param limit Maximum number of items to return. (optional, default to 25)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to +industryName)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved merchant industry codes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllIndustryCodesUsingGETCall(Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant-industry-codes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllIndustryCodesUsingGETValidateBeforeCall(Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllIndustryCodesUsingGETCall(limit, offset, sort, _callback);
        return localVarCall;

    }

    /**
     * Get all active merchant industry codes
     * Returns a list of Merchant Industries ordered by Merchant Industry Codes or Merchant Industry Name depending on user input. The list will be ordered by Merchant Industry Name by default.
     * @param limit Maximum number of items to return. (optional, default to 25)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to +industryName)
     * @return PagedMerchantIndustryCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved merchant industry codes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public PagedMerchantIndustryCode getAllIndustryCodesUsingGET(Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<PagedMerchantIndustryCode> localVarResp = getAllIndustryCodesUsingGETWithHttpInfo(limit, offset, sort);
        return localVarResp.getData();
    }

    /**
     * Get all active merchant industry codes
     * Returns a list of Merchant Industries ordered by Merchant Industry Codes or Merchant Industry Name depending on user input. The list will be ordered by Merchant Industry Name by default.
     * @param limit Maximum number of items to return. (optional, default to 25)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to +industryName)
     * @return ApiResponse&lt;PagedMerchantIndustryCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved merchant industry codes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedMerchantIndustryCode> getAllIndustryCodesUsingGETWithHttpInfo(Integer limit, Integer offset, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllIndustryCodesUsingGETValidateBeforeCall(limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<PagedMerchantIndustryCode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all active merchant industry codes (asynchronously)
     * Returns a list of Merchant Industries ordered by Merchant Industry Codes or Merchant Industry Name depending on user input. The list will be ordered by Merchant Industry Name by default.
     * @param limit Maximum number of items to return. (optional, default to 25)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to +industryName)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved merchant industry codes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllIndustryCodesUsingGETAsync(Integer limit, Integer offset, String sort, final ApiCallback<PagedMerchantIndustryCode> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllIndustryCodesUsingGETValidateBeforeCall(limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<PagedMerchantIndustryCode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getByIndustryUsingGET
     * @param industry industry (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved merchant industry code details by industry code </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> URI didn&#39;t match an existing resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByIndustryUsingGETCall(String industry, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant-industry-codes/industries/{industry}"
            .replaceAll("\\{" + "industry" + "\\}", localVarApiClient.escapeString(industry.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIndustryUsingGETValidateBeforeCall(String industry, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'industry' is set
        if (industry == null) {
            throw new ApiException("Missing the required parameter 'industry' when calling getByIndustryUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getByIndustryUsingGETCall(industry, _callback);
        return localVarCall;

    }

    /**
     * Get merchant industry code details by industry code
     * Returns Merchant Industry code details by  Industry code
     * @param industry industry (required)
     * @return MerchantIndustryCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved merchant industry code details by industry code </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> URI didn&#39;t match an existing resource. </td><td>  -  </td></tr>
     </table>
     */
    public MerchantIndustryCode getByIndustryUsingGET(String industry) throws ApiException {
        ApiResponse<MerchantIndustryCode> localVarResp = getByIndustryUsingGETWithHttpInfo(industry);
        return localVarResp.getData();
    }

    /**
     * Get merchant industry code details by industry code
     * Returns Merchant Industry code details by  Industry code
     * @param industry industry (required)
     * @return ApiResponse&lt;MerchantIndustryCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved merchant industry code details by industry code </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> URI didn&#39;t match an existing resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantIndustryCode> getByIndustryUsingGETWithHttpInfo(String industry) throws ApiException {
        okhttp3.Call localVarCall = getByIndustryUsingGETValidateBeforeCall(industry, null);
        Type localVarReturnType = new TypeToken<MerchantIndustryCode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get merchant industry code details by industry code (asynchronously)
     * Returns Merchant Industry code details by  Industry code
     * @param industry industry (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved merchant industry code details by industry code </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> URI didn&#39;t match an existing resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByIndustryUsingGETAsync(String industry, final ApiCallback<MerchantIndustryCode> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIndustryUsingGETValidateBeforeCall(industry, _callback);
        Type localVarReturnType = new TypeToken<MerchantIndustryCode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
