/*
 * Places API
 * Places API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.api.places.client;

import com.mastercard.api.places.ApiCallback;
import com.mastercard.api.places.ApiClient;
import com.mastercard.api.places.ApiException;
import com.mastercard.api.places.ApiResponse;
import com.mastercard.api.places.Configuration;
import com.mastercard.api.places.Pair;
import com.mastercard.api.places.ProgressRequestBody;
import com.mastercard.api.places.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mastercard.api.places.model.ErrorResponse;
import com.mastercard.api.places.model.PagedPlaceInfo;
import com.mastercard.api.places.model.PlaceInfo;
import com.mastercard.api.places.model.PlaceSearchRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlacesApi {
    private ApiClient localVarApiClient;

    public PlacesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlacesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getPlaceByLocationIdUsingGET
     * @param locationId location_id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved detailed information on merchants based on the provided path parameter, locationId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> URI didn&#39;t match an existing resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaceByLocationIdUsingGETCall(Long locationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places/{location_id}"
            .replaceAll("\\{" + "location_id" + "\\}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlaceByLocationIdUsingGETValidateBeforeCall(Long locationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling getPlaceByLocationIdUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getPlaceByLocationIdUsingGETCall(locationId, _callback);
        return localVarCall;

    }

    /**
     * Get the location details by using location id
     * Returns detailed information on merchants based on the provided, query parameter, locationId
     * @param locationId location_id (required)
     * @return PlaceInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved detailed information on merchants based on the provided path parameter, locationId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> URI didn&#39;t match an existing resource. </td><td>  -  </td></tr>
     </table>
     */
    public PlaceInfo getPlaceByLocationIdUsingGET(Long locationId) throws ApiException {
        ApiResponse<PlaceInfo> localVarResp = getPlaceByLocationIdUsingGETWithHttpInfo(locationId);
        return localVarResp.getData();
    }

    /**
     * Get the location details by using location id
     * Returns detailed information on merchants based on the provided, query parameter, locationId
     * @param locationId location_id (required)
     * @return ApiResponse&lt;PlaceInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved detailed information on merchants based on the provided path parameter, locationId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> URI didn&#39;t match an existing resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlaceInfo> getPlaceByLocationIdUsingGETWithHttpInfo(Long locationId) throws ApiException {
        okhttp3.Call localVarCall = getPlaceByLocationIdUsingGETValidateBeforeCall(locationId, null);
        Type localVarReturnType = new TypeToken<PlaceInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the location details by using location id (asynchronously)
     * Returns detailed information on merchants based on the provided, query parameter, locationId
     * @param locationId location_id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved detailed information on merchants based on the provided path parameter, locationId </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> URI didn&#39;t match an existing resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaceByLocationIdUsingGETAsync(Long locationId, final ApiCallback<PlaceInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlaceByLocationIdUsingGETValidateBeforeCall(locationId, _callback);
        Type localVarReturnType = new TypeToken<PlaceInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchPlacesUsingPOST
     * @param placeSearchRequest placeSearchRequest (required)
     * @param limit Maximum number of items to return. (optional, default to 25)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved search results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPlacesUsingPOSTCall(PlaceSearchRequest placeSearchRequest, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = placeSearchRequest;

        // create path and map variables
        String localVarPath = "/places/searches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchPlacesUsingPOSTValidateBeforeCall(PlaceSearchRequest placeSearchRequest, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'placeSearchRequest' is set
        if (placeSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'placeSearchRequest' when calling searchPlacesUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = searchPlacesUsingPOSTCall(placeSearchRequest, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Search for places 
     * Returns detailed information on merchants based on the provided, query parameter
     * @param placeSearchRequest placeSearchRequest (required)
     * @param limit Maximum number of items to return. (optional, default to 25)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @return PagedPlaceInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved search results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public PagedPlaceInfo searchPlacesUsingPOST(PlaceSearchRequest placeSearchRequest, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagedPlaceInfo> localVarResp = searchPlacesUsingPOSTWithHttpInfo(placeSearchRequest, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Search for places 
     * Returns detailed information on merchants based on the provided, query parameter
     * @param placeSearchRequest placeSearchRequest (required)
     * @param limit Maximum number of items to return. (optional, default to 25)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @return ApiResponse&lt;PagedPlaceInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved search results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedPlaceInfo> searchPlacesUsingPOSTWithHttpInfo(PlaceSearchRequest placeSearchRequest, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = searchPlacesUsingPOSTValidateBeforeCall(placeSearchRequest, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagedPlaceInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for places  (asynchronously)
     * Returns detailed information on merchants based on the provided, query parameter
     * @param placeSearchRequest placeSearchRequest (required)
     * @param limit Maximum number of items to return. (optional, default to 25)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved search results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPlacesUsingPOSTAsync(PlaceSearchRequest placeSearchRequest, Integer limit, Integer offset, final ApiCallback<PagedPlaceInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchPlacesUsingPOSTValidateBeforeCall(placeSearchRequest, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagedPlaceInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
